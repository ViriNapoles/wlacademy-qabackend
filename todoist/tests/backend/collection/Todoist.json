{
	"info": {
		"_postman_id": "2fb98b8b-d256-405b-8718-9ff39eea343f",
		"name": "Todoist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Project",
			"item": [
				{
					"name": "Create project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"projectId\", jsonData.id);",
									"",
									"var name = pm.environment.get(\"projectName\");",
									"    pm.test(\"Validate Project name is correct\", function () {",
									"    pm.expect(jsonData.name).to.eql(name);",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"color\": {\"type\": \"number\"},",
									"        \"name\": {\"type\": \"string\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"shared\": {\"type\": \"boolean\"},",
									"        \"favorite\": {\"type\": \"boolean\"},",
									"        \"sync_id\": {\"type\": \"number\"},",
									"        \"url\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"id\", \"name\"]",
									"}",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{projectName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/projects",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = pm.environment.get(\"projectId\");",
									"pm.test(\"Validate ID Project requested is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(id);",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"color\": {\"type\": \"number\"},",
									"        \"name\": {\"type\": \"string\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"shared\": {\"type\": \"boolean\"},",
									"        \"favorite\": {\"type\": \"boolean\"},",
									"        \"sync_id\": {\"type\": \"number\"},",
									"        \"url\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"id\", \"name\"]",
									"}",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/projects/{{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\":\"object\",",
									"        \"properties\": {",
									"            \"id\": {\"type\": \"number\"},",
									"            \"order\": {\"type\": \"number\"},",
									"            \"color\": {\"type\": \"number\"},",
									"            \"name\": {\"type\": \"string\"},",
									"            \"comment_count\": {\"type\": \"number\"},",
									"            \"shared\": {\"type\": \"boolean\"},",
									"            \"favorite\": {\"type\": \"boolean\"},",
									"            \"sync_id\": {\"type\": \"number\"},",
									"            \"url\": {\"type\": \"string\"}",
									"        },",
									"        \"required\": [\"id\", \"name\"]",
									"    },",
									"}",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/projects",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Things To Do in Oaxaca :B\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/projects/{{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/projects/{{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.response.to.be.success;",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "Create a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"taskId\", jsonData.id);",
									"",
									"var contentTask = pm.environment.get(\"taskContent\");",
									"    ",
									"pm.test(\"Validate Task name is correct in json response\", function () {",
									"    pm.expect(jsonData.content).to.eql(contentTask);",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"assigner\": {\"type\": \"number\"},",
									"        \"project_id\": {\"type\": \"number\"},",
									"        \"section_id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"content\": {\"type\": \"string\"},",
									"        \"completed\": {\"type\": \"boolean\"},",
									"        \"label_ids\": {\"type\": \"array\"},",
									"        \"priority\": {\"type\": \"number\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"creator\": {\"type\": \"number\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"due\":{",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"recurring\":{\"type\": \"boolean\"},",
									"                \"string\": {\"type\": \"string\"},",
									"                \"date\": {\"type\": \"string\"},",
									"                \"datetime\": {\"type\": \"string\"},",
									"                \"timezone\": {\"type\": \"string\"}",
									"            }",
									"        },",
									"        \"url\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"id\", \"content\"]",
									"};",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"{{taskContent}}\", \n    \"due_string\": \"tomorrow at 12:00\", \n    \"due_lang\": \"en\", \n    \"priority\": 4,\n    \"project_id\": {{projectId}}\n}"
						},
						"url": {
							"raw": "{{baseURL}}/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"taskId\", jsonData.id);",
									"",
									"var contentTask = pm.variables.get(\"taskContentDDT\");",
									"",
									"pm.test(\"Validate Tasks name is correct in json response\", function () {",
									"    pm.expect(jsonData.content).to.eql(contentTask);",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"assigner\": {\"type\": \"number\"},",
									"        \"project_id\": {\"type\": \"number\"},",
									"        \"section_id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"content\": {\"type\": \"string\"},",
									"        \"completed\": {\"type\": \"boolean\"},",
									"        \"label_ids\": {\"type\": \"array\"},",
									"        \"priority\": {\"type\": \"number\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"creator\": {\"type\": \"number\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"due\":{",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"recurring\":{\"type\": \"boolean\"},",
									"                \"string\": {\"type\": \"string\"},",
									"                \"date\": {\"type\": \"string\"},",
									"                \"datetime\": {\"type\": \"string\"},",
									"                \"timezone\": {\"type\": \"string\"}",
									"            }",
									"        },",
									"        \"url\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"id\", \"content\"]",
									"};",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"{{taskContentDDT}}\", \n    \"due_string\": \"tomorrow at 12:00\", \n    \"due_lang\": \"en\", \n    \"priority\": {{priorityDDT}},\n    \"project_id\": {{projectId}}\n}"
						},
						"url": {
							"raw": "{{baseURL}}/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var taskId = pm.environment.get(\"taskId\");",
									"var taskContent = pm.environment.get(\"taskContent\");",
									"",
									"pm.test(\"Validate taskId and taskContent in data response\", function () {",
									"    pm.expect(jsonData.id).to.eql(taskId);",
									"    pm.expect(jsonData.content).to.eql(taskContent); ",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {\"type\": \"number\"},",
									"        \"assigner\": {\"type\": \"number\"},",
									"        \"project_id\": {\"type\": \"number\"},",
									"        \"section_id\": {\"type\": \"number\"},",
									"        \"order\": {\"type\": \"number\"},",
									"        \"content\": {\"type\": \"string\"},",
									"        \"completed\": {\"type\": \"boolean\"},",
									"        \"label_ids\": {\"type\": \"array\"},",
									"        \"priority\": {\"type\": \"number\"},",
									"        \"comment_count\": {\"type\": \"number\"},",
									"        \"creator\": {\"type\": \"number\"},",
									"        \"created\": {\"type\": \"string\"},",
									"        \"due\":{",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"recurring\":{\"type\": \"boolean\"},",
									"                \"string\": {\"type\": \"string\"},",
									"                \"date\": {\"type\": \"string\"},",
									"                \"datetime\": {\"type\": \"string\"},",
									"                \"timezone\": {\"type\": \"string\"}",
									"            }",
									"        },",
									"        \"url\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"id\", \"content\"]",
									"};",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all active tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var taskId = pm.environment.get(\"taskId\");",
									"var taskContent = pm.environment.get(\"taskContent\");",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": {\"type\": \"number\"},",
									"            \"assigner\": {\"type\": \"number\"},",
									"            \"project_id\": {\"type\": \"number\"},",
									"            \"section_id\": {\"type\": \"number\"},",
									"            \"order\": {\"type\": \"number\"},",
									"            \"content\": {\"type\": \"string\"},",
									"            \"completed\": {\"type\": \"boolean\"},",
									"            \"label_ids\": {\"type\": \"array\"},",
									"            \"priority\": {\"type\": \"number\"},",
									"            \"comment_count\": {\"type\": \"number\"},",
									"            \"creator\": {\"type\": \"number\"},",
									"            \"created\": {\"type\": \"string\"},",
									"            \"due\":{",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"recurring\":{\"type\": \"boolean\"},",
									"                    \"string\": {\"type\": \"string\"},",
									"                    \"date\": {\"type\": \"string\"},",
									"                    \"datetime\": {\"type\": \"string\"},",
									"                    \"timezone\": {\"type\": \"string\"}",
									"                }",
									"            },",
									"            \"url\": {\"type\": \"string\"}",
									"        },",
									"        \"required\": [\"id\", \"content\"]",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks?project_id={{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "project_id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Buy Fruits and vegetables\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Complete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}/close",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}/close",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reopen task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}/reopen",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.response.to.be.success;",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Task negative scenarios",
			"item": [
				{
					"name": "Create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad request: missing required content parameter\", function () {",
									"    pm.response.to.have.body(\"Bad Request\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // \"content\": \"{{taskContent}}\", \n    \"due_string\": \"tomorrow at 12:00\", \n    \"due_lang\": \"en\", \n    \"priority\": 4,\n    \"project_id\": {{projectId}}\n}"
						},
						"url": {
							"raw": "{{baseURL}}/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not Found: Task ID\", function () {",
									"    pm.response.to.have.body(\"Not Found\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/01010101",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"01010101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all active tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks?project_id={{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "project_id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad request: Missing update information\", function () {",
									"    pm.response.to.have.body(\"Bad Request\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"content\": \"Buy Fruits and vegetables\"\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Complete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}/close",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405 method not allowed\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}/close",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reopen task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}/reopen",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 4xx\", function () {",
							"    pm.response.to.have.not.success;",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}